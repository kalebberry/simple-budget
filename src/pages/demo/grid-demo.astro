<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Auto‑Grid Demo · CSS Grid + Custom Properties</title>
    <link rel="stylesheet" type="text/css" href="/src/styles/main.css" />
    <link rel="stylesheet" type="text/css" href="/src/styles/grid-demo.css" />
  </head>
</html>
<body>
  <div class="wrap">
    <header>
      <h1>Auto‑Grid Demo</h1>
      <p class="lead">
        A modern, media‑query‑free grid built with CSS Grid + custom properties. Inspired by Every Layout and the intrinsic design ideas championed by Jen Simmons, Kevin Powell, and Stephanie Eckles. Use the controls to see how <code>auto‑fit</code>/<code>auto‑fill</code>, gutters, and min item widths change the layout.
      </p>
    </header>

    <section class="panel" aria-labelledby="controls-title">
      <h2 id="controls-title" style="margin:0 0 .25rem; font-size:1.1rem">Playground Controls</h2>
      <div class="controls">
        <div class="control">
          <label for="placement">Grid placement</label>
          <select id="placement" aria-label="Grid placement">
            <option value="auto-fit" selected>auto-fit (collapse empty tracks)</option>
            <option value="auto-fill">auto-fill (keep phantom tracks)</option>
          </select>
          <div class="hint">Controls how extra tracks behave when the row isn’t full.</div>
        </div>
        <div class="control">
          <label for="gutter">Gutter (gap)</label>
          <input id="gutter" type="range" min="0" max="40" step="2" value="16" />
          <div class="hint">
            <code>gap</code> in pixels (current: <span id="gutterOut">16</span>px)
          </div>
        </div>
        <div class="control">
          <label for="minsize">Min item size</label>
          <input id="minsize" type="range" min="140" max="420" step="10" value="260" />
          <div class="hint">
            Minimum preferred card width in pixels (current: <span id="minOut">260</span>px)
          </div>
        </div>
        <div class="control">
          <label for="containerWidth">Container width</label>
          <input id="containerWidth" type="range" min="400" max="1600" step="10" value="1600" />
          <div class="hint">
            Resize the container to see the grid adapt (<span id="widthOut">1600</span>px)
          </div>
        </div>
      </div>
    </section>

    <main>
      <section class="flow-large">
        <h2 class="section-title">1. Auto‑Grid Playground</h2>
        <div id="playground" class="grid" style="--grid-placement:auto-fit; --gutter:1rem; --grid-min-item-size:16rem">
          <!-- 12 demo cards with varied content length -->
          <article class="card"><h3>Card 1</h3><p>Short and sweet.</p></article>
          <article class="card">
            <h3>Card 2</h3><p>Medium copy length to show equal height not required.</p>
          </article>
          <article class="card">
            <h3>Card 3</h3><p>Sometimes a card has a longer paragraph. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean quis.</p>
          </article>
          <article class="card"><h3>Card 4</h3><p>Compact.</p></article>
          <article class="card">
            <h3>Card 5</h3><p>Another medium block of text to add variety and demonstrate wrapping.</p>
          </article>
          <article class="card"><h3>Card 6</h3><p>Short.</p></article>
          <article class="card">
            <h3>Card 7</h3><p>With a little more content to force different heights so you can see the flow.</p>
          </article>
          <article class="card"><h3>Card 8</h3><p>Short.</p></article>
          <article class="card"><h3>Card 9</h3><p>Short.</p></article>
          <article class="card"><h3>Card 10</h3><p>Short.</p></article>
          <article class="card"><h3>Card 11</h3><p>Medium.</p></article>
          <article class="card">
            <h3>Card 12</h3><p>Longer content helps visualize how CSS Grid handles masonry‑ish flows without hacks.</p>
          </article>
        </div>
      </section>

      <header>
        <h2 class="section-title">2. Column Count Presets</h2>
        <p class="lead" style="margin-block-start:0">
          Use <code>data-cols</code> for quick, breakpoint‑free columns that adapt to space.
        </p>
      </header>
      <section class="flow-large">
        <h3 style="margin:.5rem 0 0">2 columns</h3>
        <div class="grid" data-cols="2">
          <article class="card"><h3>A</h3><p>Two-up layout.</p></article>
          <article class="card"><h3>B</h3><p>Scales without media queries.</p></article>
          <article class="card"><h3>C</h3><p>Third card wraps neatly.</p></article>
        </div>
      </section>

      <section class="flow-large">
        <h3>3 columns</h3>
        <div class="grid" data-cols="3">
          <article class="card"><h3>1</h3><p>Three‑up layout.</p></article>
          <article class="card"><h3>2</h3><p>Min size prevents squish.</p></article>
          <article class="card"><h3>3</h3><p>Auto‑fit fills the row.</p></article>
          <article class="card"><h3>4</h3><p>Wraps as needed.</p></article>
        </div>
      </section>

      <section class="flow-large">
        <h3>4–6 columns</h3>
        <div class="grid" data-cols="4">
          <article class="card"><h3>One</h3><p>Four‑up baseline.</p></article>
          <article class="card"><h3>Two</h3><p>…</p></article>
          <article class="card"><h3>Three</h3><p>…</p></article>
          <article class="card"><h3>Four</h3><p>…</p></article>
          <article class="card"><h3>Five</h3><p>Wraps cleanly.</p></article>
        </div>
      </section>

      <section class="flow-large">
        <div class="grid" data-cols="5">
          <article class="card"><h3>1</h3><p>Five‑up.</p></article>
          <article class="card"><h3>2</h3><p>…</p></article>
          <article class="card"><h3>3</h3><p>…</p></article>
          <article class="card"><h3>4</h3><p>…</p></article>
          <article class="card"><h3>5</h3><p>…</p></article>
          <article class="card"><h3>6</h3><p>Wraps.</p></article>
        </div>
      </section>

      <section class="flow-large">
        <div class="grid" data-cols="6">
          <article class="card"><h3>I</h3><p>Six‑up.</p></article>
          <article class="card"><h3>II</h3><p>…</p></article>
          <article class="card"><h3>III</h3><p>…</p></article>
          <article class="card"><h3>IV</h3><p>…</p></article>
          <article class="card"><h3>V</h3><p>…</p></article>
          <article class="card"><h3>VI</h3><p>…</p></article>
          <article class="card"><h3>VII</h3><p>Wraps.</p></article>
        </div>
      </section>

      <section class="flow-large">
        <h3>7 - 12 columns</h3>
        <div class="grid" data-cols="7">
          <article class="card"><h3>1</h3><p>7-up</p></article>
          <article class="card"><h3>2</h3><p>…</p></article>
          <article class="card"><h3>3</h3><p>…</p></article>
          <article class="card"><h3>4</h3><p>…</p></article>
          <article class="card"><h3>5</h3><p>…</p></article>
          <article class="card"><h3>6</h3><p>…</p></article>
          <article class="card"><h3>7</h3><p>…</p></article>
        </div>
      </section>

      <section class="flow-large">
        <div class="grid" data-cols="8">
          <article class="card"><h3>1</h3><p>8-up</p></article>
          <article class="card"><h3>2</h3><p>…</p></article>
          <article class="card"><h3>3</h3><p>…</p></article>
          <article class="card"><h3>4</h3><p>…</p></article>
          <article class="card"><h3>5</h3><p>…</p></article>
          <article class="card"><h3>6</h3><p>…</p></article>
          <article class="card"><h3>7</h3><p>…</p></article>
          <article class="card"><h3>8</h3><p>…</p></article>
        </div>
      </section>

      <section class="flow-large">
        <div class="grid" data-cols="12">
          <article class="card"><h3>1</h3><p>12-up</p></article>
          <article class="card"><h3>2</h3><p>…</p></article>
          <article class="card"><h3>3</h3><p>…</p></article>
          <article class="card"><h3>4</h3><p>…</p></article>
          <article class="card"><h3>5</h3><p>…</p></article>
          <article class="card"><h3>6</h3><p>…</p></article>
          <article class="card"><h3>7</h3><p>…</p></article>
          <article class="card"><h3>8</h3><p>…</p></article>
          <article class="card"><h3>9</h3><p>…</p></article>
          <article class="card"><h3>10</h3><p>…</p></article>
          <article class="card"><h3>11</h3><p>…</p></article>
          <article class="card"><h3>12</h3><p>…</p></article>
        </div>
      </section>

      <section class="flow-large">
        <h2 class="section-title">5) Dense Packing + Spans</h2>
        <p class="lead" style="margin-block-start:0">
          Turn on <code>.grid--dense</code> and use item spans to fill gaps for a masonry‑ish feel.
        </p>

        <div class="grid grid--dense" data-cols="4">
          <article class="card grid__span-2"><h3>Wide</h3><p>Spans 2 columns.</p></article>
          <article class="card"><h3>1</h3><p>Normal</p></article>
          <article class="card"><h3>2</h3><p>Normal</p></article>
          <article class="card grid__row-2"><h3>Tall</h3><p>Spans 2 rows.</p></article>
          <article class="card"><h3>3</h3><p>Normal</p></article>
          <article class="card"><h3>4</h3><p>Normal</p></article>
          <article class="card"><h3>5</h3><p>Normal</p></article>
          <article class="card"><h3>6</h3><p>Normal</p></article>
        </div>

        <h2 class="section-title">6) Sidebar Layout (Explicit Grid)</h2>
        <p class="lead" style="margin-block-start:0">For page shells, use an explicit two‑column grid—content + sidebar—that still collapses gracefully.</p>
        <div class="sidebar-grid">
          <article class="card">
            <h3>Main Content</h3><p>
              Uses <code>grid-template-columns: minmax(16rem, 3fr) minmax(12rem, 1fr)</code> so the main area grows faster than the sidebar.
            </p>
          </article>
          <aside class="card"><h3>Sidebar</h3><p>Holds TOC, filters, or ads.</p></aside>
        </div>

        <footer style="margin-block: var(--space-xl); color: var(--muted);">Built with pure CSS Grid, custom properties, and a sprinkle of progressive enhancement. No media queries required.</footer>
      </section>
    </main>

    <script>
      // Tiny controller for the playground grid
      const root = document.documentElement;
      const grid = document.getElementById("playground");

      // Select the main container that wraps all grid demos
      const mainContainer = document.querySelector("main");

      const placement = document.getElementById("placement");
      const gutter = document.getElementById("gutter");
      const minsize = document.getElementById("minsize");
      const gutterOut = document.getElementById("gutterOut");
      const minOut = document.getElementById("minOut");

      placement.addEventListener("change", (e) => {
        grid.style.setProperty("--grid-placement", e.target.value);
      });
      gutter.addEventListener("input", (e) => {
        const px = `${e.target.value}px`;
        grid.style.setProperty("--gutter", px);
        gutterOut.textContent = e.target.value;
      });
      minsize.addEventListener("input", (e) => {
        const px = `${e.target.value}px`;
        grid.style.setProperty("--grid-min-item-size", px);
        minOut.textContent = e.target.value;
      });

      // New controller for the main container width
      const containerWidth = document.getElementById("containerWidth");
      const widthOut = document.getElementById("widthOut");

      containerWidth.addEventListener("input", (e) => {
        const px = `${e.target.value}px`;
        mainContainer.style.width = px;
        widthOut.textContent = e.target.value;
      });
    </script>
  </div>
</body>
