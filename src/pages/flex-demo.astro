<!doctype html>
<html lang='en'>
	<head>
		<meta charset='utf-8' />
		<meta name='viewport' content='width=device-width, initial-scale=1' />
		<title>Auto‑Grid Demo · CSS Grid + Custom Properties</title>
		<style>
			/* Global box-sizing so padding/border don't break track math */
			*,
			*::before,
			*::after {
				box-sizing: border-box;
			}
			/* --- Base demo styles ------------------------------------------------- */
			:root {
				--bg: #0b0c0f;
				--panel: #0f1117;
				--text: #e6e6e6;
				--muted: #a3a3a3;
				--brand: #7c8aff;
				--space-2xs: 0.25rem;
				--space-xs: 0.5rem;
				--space-s: 0.75rem;
				--space-m: 1rem;
				--space-l: 1.5rem;
				--space-xl: 2rem;
				--radius: 14px;
				--shadow: 0 8px 24px rgba(0, 0, 0, 0.25);
			}
			@media (prefers-color-scheme: light) {
				:root {
					--bg: #f7f7fc;
					--panel: #fff;
					--text: #121212;
					--muted: #5a5a5a;
					--brand: #3b63ff;
				}
			}
			html,
			body {
				height: 100%;
			}
			body {
				margin: 0;
				font:
					16px/1.5 system-ui,
					-apple-system,
					Segoe UI,
					Roboto,
					Ubuntu,
					Cantarell,
					Noto Sans,
					'Helvetica Neue',
					Arial,
					'Apple Color Emoji',
					'Segoe UI Emoji';
				color: var(--text);
				background: radial-gradient(
						1200px 800px at 10% -10%,
						rgba(124, 138, 255, 0.08),
						transparent
					),
					radial-gradient(1200px 800px at 110% 10%, rgba(124, 138, 255, 0.08), transparent),
					var(--bg);
			}
			.wrap {
				max-width: 1200px;
				margin-inline: auto;
				padding: var(--space-xl) var(--space-l);
			}
			header {
				display: grid;
				gap: var(--space-m);
				margin-block-end: var(--space-xl);
			}
			h1 {
				margin: 0;
				font-size: clamp(1.5rem, 1rem + 2vw, 2.25rem);
				letter-spacing: 0.2px;
			}
			.lead {
				color: var(--muted);
				max-width: 70ch;
			}

			/* --- Control panel ---------------------------------------------------- */
			.panel {
				background: var(--panel);
				border-radius: var(--radius);
				box-shadow: var(--shadow);
				padding: var(--space-l);
				display: grid;
				gap: var(--space-m);
				margin-block: var(--space-l);
				border: 1px solid color-mix(in oklab, var(--text) 10%, transparent);
			}
			.controls {
				display: grid;
				gap: var(--space-m);
				grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
			}
			.control {
				display: grid;
				gap: 0.35rem;
			}
			.control label {
				font-weight: 600;
			}
			.control .hint {
				color: var(--muted);
				font-size: 0.9rem;
			}
			input[type='range'] {
				width: 100%;
			}
			select,
			input[type='range'] {
				accent-color: var(--brand);
			}

			/* --- Cards ------------------------------------------------------------ */
			.card {
				box-sizing: border-box;
				background: color-mix(in oklab, var(--panel) 94%, var(--brand) 6%);
				border: 1px solid color-mix(in oklab, var(--text) 12%, transparent);
				border-radius: var(--radius);
				box-shadow: 0 4px 14px rgba(0, 0, 0, 0.15);
				padding: var(--space-m);
				display: grid;
				gap: 0.5rem;
				min-inline-size: 0;
			}
			.card h3 {
				margin: 0;
				font-size: 1rem;
			}
			.card p {
				margin: 0;
				color: var(--muted);
			}

			/* --- The Auto‑Grid system (your API) ---------------------------------- */
			/*
      AUTO GRID
      Related Every Layout: https://every-layout.dev/layouts/grid/
      More info: https://piccalil.li/tutorial/create-a-responsive-grid-layout-with-no-media-queries-using-css-grid/

      Custom properties (with sensible fallbacks):
        --gutter: space between items (default 1rem here)
        --grid-min-item-size: minimum preferred card width (default 16rem)
        --grid-placement: auto-fit (collapse empty tracks) or auto-fill
    */

			.grid {
				display: grid;
				grid-template-columns: repeat(
					var(--grid-placement, auto-fit),
					minmax(var(--grid-min-item-size, 16rem), 1fr)
				);
				gap: var(--gutter, 1rem);
				grid-auto-rows: minmax(min-content, auto);
			}

			/* Presets using data-layout for a clean, declarative API */
			.grid[data-layout='50-50'] {
				--grid-placement: auto-fit;
				/* Each card aims for half width but won’t shrink below 16rem */
				--grid-min-item-size: clamp(16rem, 50vw, 40rem);
			}
			.grid[data-layout='thirds'] {
				--grid-placement: auto-fit;
				/* Aim for ~33% but respect a 16rem minimum */
				--grid-min-item-size: clamp(16rem, 33.33%, 28rem);
			}

			/* Column-count presets via data-cols (1–6) */
			.grid[data-cols] {
				--grid-placement: auto-fit;
			}
			.grid[data-cols='1'] {
				--grid-min-item-size: 100%;
			}
			.grid[data-cols='2'] {
				--grid-min-item-size: max(16rem, calc((100% - (var(--gutter, 1rem) * 1)) / 2));
			}
			.grid[data-cols='3'] {
				--grid-min-item-size: max(14rem, calc((100% - (var(--gutter, 1rem) * 2)) / 3));
			}
			.grid[data-cols='4'] {
				--grid-min-item-size: max(12rem, calc((100% - (var(--gutter, 1rem) * 3)) / 4));
			}
			.grid[data-cols='5'] {
				--grid-min-item-size: max(10rem, calc((100% - (var(--gutter, 1rem) * 4)) / 5));
			}
			.grid[data-cols='6'] {
				--grid-min-item-size: max(9rem, calc((100% - (var(--gutter, 1rem) * 5)) / 6));
			}
			.grid[data-cols='1'] {
				--grid-min-item-size: 100%;
			}
			.grid[data-cols='2'] {
				--grid-min-item-size: clamp(16rem, 50%, 40rem);
			}
			.grid[data-cols='3'] {
				--grid-min-item-size: clamp(16rem, 33.333%, 28rem);
			}
			.grid[data-cols='4'] {
				--grid-min-item-size: clamp(14rem, 25%, 22rem);
			}
			.grid[data-cols='5'] {
				--grid-min-item-size: clamp(12rem, 20%, 20rem);
			}
			.grid[data-cols='6'] {
				--grid-min-item-size: clamp(10rem, 16.666%, 18rem);
			}

			/* Dense packing (fills gaps when items span columns/rows) */
			.grid--dense {
				grid-auto-flow: dense;
			}
			.grid__span-2 {
				grid-column: span 2;
			}
			.grid__row-2 {
				grid-row: span 2;
			}

			/* Sidebar layout (explicit 2D grid, complementary to auto-grid) */
			.sidebar-grid {
				display: grid;
				gap: var(--gutter, 1rem);
				grid-template-columns: minmax(16rem, 3fr) minmax(12rem, 1fr);
				align-items: start;
			}
			.grid[data-layout='thirds'] {
				--grid-placement: auto-fit;
				/* Aim for ~33% but respect a 16rem minimum */
				--grid-min-item-size: clamp(16rem, 33.33%, 28rem);
			}

			/* Demo section titles */
			.section-title {
				margin: var(--space-xl) 0 var(--space-m);
				font-size: 1.25rem;
			}

			/* ================= Flexbox Grid (Auto + Exact Columns) ================ */
			.flexgrid {
				display: flex;
				flex-wrap: wrap;
				gap: var(--gutter, 1rem);
				align-items: stretch; /* equal heights per row when cards stretch */
			}
			.flexgrid > * {
				/* default: responsive auto tiles */
				box-sizing: border-box;
				flex: 1 1 min(var(--flex-min, 20rem), 100%);
				min-inline-size: 0;
			}

			/* Exact column counts via data-cols (1–6).
       We compute the track width as: (100% - (cols-1)*gap) / cols
       Then ensure a floor with max() so items don’t squish. */
			.flexgrid[data-cols] {
				--cols: 1;
			}
			.flexgrid[data-cols] > * {
				flex-grow: 0;
				flex-basis: max(
					var(--min, 14rem),
					calc((100% - (var(--cols) - 1) * var(--gutter, 1rem)) / var(--cols))
				);
			}
			.flexgrid[data-cols='1'] {
				--cols: 1;
			}
			.flexgrid[data-cols='2'] {
				--cols: 2;
			}
			.flexgrid[data-cols='3'] {
				--cols: 3;
			}
			.flexgrid[data-cols='4'] {
				--cols: 4;
			}
			.flexgrid[data-cols='5'] {
				--cols: 5;
			}
			.flexgrid[data-cols='6'] {
				--cols: 6;
			}

			/* Utilities */
			.flexgrid--center {
				justify-content: center;
			}
			.flexgrid--end {
				justify-content: flex-end;
			}
			.flexgrid--between {
				justify-content: space-between;
			}
			.flexgrid--around {
				justify-content: space-around;
			}

			/* Flexbox Sidebar (content + sidebar) */
			.flex-sidebar {
				display: flex;
				gap: var(--gutter, 1rem);
				flex-wrap: wrap;
			}
			.flex-sidebar__main {
				flex: 1 1 min(42rem, 100%);
			}
			.flex-sidebar__aside {
				flex: 1 1 min(20rem, 100%);
				max-inline-size: 28rem;
			}
		</style>
	</head>
	<body>
		<div class='wrap'>
			<header>
				<h1>Auto‑Grid Demo</h1>
				<p class='lead'>
					A modern, media‑query‑free grid built with CSS Grid + custom properties. Inspired by Every
					Layout and the intrinsic design ideas championed by Jen Simmons, Kevin Powell, and
					Stephanie Eckles. Use the controls to see how <code>auto‑fit</code>/<code>
						auto‑fill
					</code>, gutters, and min item widths change the layout.
				</p>
			</header>

			<section class='panel' aria-labelledby='controls-title'>
				<h2 id='controls-title' style='margin:0 0 .25rem; font-size:1.1rem'>Playground Controls</h2>
				<div class='controls'>
					<div class='control'>
						<label for='placement'>Grid placement</label>
						<select id='placement' aria-label='Grid placement'>
							<option value='auto-fit' selected>auto-fit (collapse empty tracks)</option>
							<option value='auto-fill'>auto-fill (keep phantom tracks)</option>
						</select>
						<div class='hint'>Controls how extra tracks behave when the row isn’t full.</div>
					</div>
					<div class='control'>
						<label for='gutter'>Gutter (gap)</label>
						<input id='gutter' type='range' min='0' max='40' step='2' value='16' />
						<div class='hint'>
							<code>gap</code> in pixels (current: <span id='gutterOut'>16</span>px)
						</div>
					</div>
					<div class='control'>
						<label for='minsize'>Min item size</label>
						<input id='minsize' type='range' min='140' max='420' step='10' value='260' />
						<div class='hint'>
							Minimum preferred card width in pixels (current: <span id='minOut'>260</span>px)
						</div>
					</div>
				</div>
			</section>

			<h2 class='section-title'>1) Auto‑Grid Playground</h2>
			<div
				id='playground'
				class='grid'
				style='--grid-placement:auto-fit; --gutter:1rem; --grid-min-item-size:16rem'
			>
				<!-- 12 demo cards with varied content length -->
				<article class='card'><h3>Card 1</h3><p>Short and sweet.</p></article>
				<article class='card'>
					<h3>Card 2</h3><p>Medium copy length to show equal height not required.</p>
				</article>
				<article class='card'>
					<h3>Card 3</h3><p>
						Sometimes a card has a longer paragraph. Lorem ipsum dolor sit amet, consectetur
						adipiscing elit. Aenean quis.
					</p>
				</article>
				<article class='card'><h3>Card 4</h3><p>Compact.</p></article>
				<article class='card'>
					<h3>Card 5</h3><p>
						Another medium block of text to add variety and demonstrate wrapping.
					</p>
				</article>
				<article class='card'><h3>Card 6</h3><p>Short.</p></article>
				<article class='card'>
					<h3>Card 7</h3><p>
						With a little more content to force different heights so you can see the flow.
					</p>
				</article>
				<article class='card'><h3>Card 8</h3><p>Short.</p></article>
				<article class='card'><h3>Card 9</h3><p>Short.</p></article>
				<article class='card'><h3>Card 10</h3><p>Short.</p></article>
				<article class='card'><h3>Card 11</h3><p>Medium.</p></article>
				<article class='card'>
					<h3>Card 12</h3><p>
						Longer content helps visualize how CSS Grid handles masonry‑ish flows without hacks.
					</p>
				</article>
			</div>

			<h2 class='section-title'>2) 50/50 Layout Preset</h2>
			<div class='grid' data-layout='50-50'>
				<article class='card'>
					<h3>Left</h3><p>
						This preset aims for two columns but will stack gracefully below the min size.
					</p>
				</article>
				<article class='card'>
					<h3>Right</h3><p>Try narrowing your viewport to see the breakpoint‑free collapse.</p>
				</article>
				<article class='card'>
					<h3>Bonus</h3><p>
						If there’s a third card, <code>auto‑fit</code> will distribute space as tracks collapse.
					</p>
				</article>
				$1

				<h2 class='section-title'>4) Column Count Presets</h2>
				<p class='lead' style='margin-block-start:0'>
					Use <code>data-cols</code> for quick, breakpoint‑free columns that adapt to space.
				</p>

				<h3 style='margin:.5rem 0 0'>2 columns</h3>
				<div class='grid' data-cols='2'>
					<article class='card'><h3>A</h3><p>Two-up layout.</p></article>
					<article class='card'><h3>B</h3><p>Scales without media queries.</p></article>
					<article class='card'><h3>C</h3><p>Third card wraps neatly.</p></article>
				</div>

				<h3 style='margin:1rem 0 0'>3 columns</h3>
				<div class='grid' data-cols='3'>
					<article class='card'><h3>1</h3><p>Three‑up layout.</p></article>
					<article class='card'><h3>2</h3><p>Min size prevents squish.</p></article>
					<article class='card'><h3>3</h3><p>Auto‑fit fills the row.</p></article>
					<article class='card'><h3>4</h3><p>Wraps as needed.</p></article>
				</div>

				<h3 style='margin:1rem 0 0'>4–6 columns</h3>
				<div class='grid' data-cols='4'>
					<article class='card'><h3>One</h3><p>Four‑up baseline.</p></article>
					<article class='card'><h3>Two</h3><p>…</p></article>
					<article class='card'><h3>Three</h3><p>…</p></article>
					<article class='card'><h3>Four</h3><p>…</p></article>
					<article class='card'><h3>Five</h3><p>Wraps cleanly.</p></article>
				</div>

				<div class='grid' data-cols='5' style='margin-block: .75rem 0'>
					<article class='card'><h3>1</h3><p>Five‑up.</p></article>
					<article class='card'><h3>2</h3><p>…</p></article>
					<article class='card'><h3>3</h3><p>…</p></article>
					<article class='card'><h3>4</h3><p>…</p></article>
					<article class='card'><h3>5</h3><p>…</p></article>
					<article class='card'><h3>6</h3><p>Wraps.</p></article>
				</div>

				<div class='grid' data-cols='6'>
					<article class='card'><h3>I</h3><p>Six‑up.</p></article>
					<article class='card'><h3>II</h3><p>…</p></article>
					<article class='card'><h3>III</h3><p>…</p></article>
					<article class='card'><h3>IV</h3><p>…</p></article>
					<article class='card'><h3>V</h3><p>…</p></article>
					<article class='card'><h3>VI</h3><p>…</p></article>
					<article class='card'><h3>VII</h3><p>Wraps.</p></article>
				</div>

				<h2 class='section-title'>5) Dense Packing + Spans</h2>
				<p class='lead' style='margin-block-start:0'>
					Turn on <code>.grid--dense</code> and use item spans to fill gaps for a masonry‑ish feel.
				</p>
				<div class='grid grid--dense' data-cols='4'>
					<article class='card grid__span-2'><h3>Wide</h3><p>Spans 2 columns.</p></article>
					<article class='card'><h3>1</h3><p>Normal</p></article>
					<article class='card'><h3>2</h3><p>Normal</p></article>
					<article class='card grid__row-2'><h3>Tall</h3><p>Spans 2 rows.</p></article>
					<article class='card'><h3>3</h3><p>Normal</p></article>
					<article class='card'><h3>4</h3><p>Normal</p></article>
					<article class='card'><h3>5</h3><p>Normal</p></article>
					<article class='card'><h3>6</h3><p>Normal</p></article>
				</div>

				<h2 class='section-title'>6) Sidebar Layout (Explicit Grid)</h2>
				<p class='lead' style='margin-block-start:0'>
					For page shells, use an explicit two‑column grid—content + sidebar—that still collapses
					gracefully.
				</p>
				<div class='sidebar-grid'>
					<article class='card'>
						<h3>Main Content</h3><p>
							Uses <code>grid-template-columns: minmax(16rem, 3fr) minmax(12rem, 1fr)</code> so the main
							area grows faster than the sidebar.
						</p>
					</article>
					<aside class='card'><h3>Sidebar</h3><p>Holds TOC, filters, or ads.</p></aside>
				</div>

				<footer style='margin-block: var(--space-xl); color: var(--muted);'>
					Built with pure CSS Grid, custom properties, and a sprinkle of progressive enhancement. No
					media queries required.
				</footer>

				<h2 class='section-title'>7) Flexbox Grid — Auto Tiles</h2>
				<p class='lead' style='margin-block-start:0'>
					Flexbox version of the auto grid. Items use <code>
						flex: 1 1 min(var(--flex-min, 20rem), 100%)
					</code> and wrap with <code>gap</code>.
				</p>
				<div class='flexgrid' style='--gutter:1rem; --flex-min: 22rem'>
					<article class='card'><h3>Auto 1</h3><p>Auto tiles grow and wrap.</p></article>
					<article class='card'>
						<h3>Auto 2</h3><p>Equal row heights via <code>align-items: stretch</code>.</p>
					</article>
					<article class='card'><h3>Auto 3</h3><p>No media queries required.</p></article>
					<article class='card'>
						<h3>Auto 4</h3><p>Uses flex‑basis with <code>min()</code>.</p>
					</article>
					<article class='card'><h3>Auto 5</h3><p>Just works.</p></article>
				</div>

				<h2 class='section-title'>8) Flexbox Grid — Exact Column Counts</h2>
				<p class='lead' style='margin-block-start:0'>
					Use <code>data-cols</code> to force exact columns. The basis is computed with container‑aware
					math and respects gaps.
				</p>

				<h3 style='margin:.5rem 0 0'>2 columns</h3>
				<div class='flexgrid' data-cols='2' style='--gutter:1rem; --min:16rem'>
					<article class='card'><h3>A</h3><p>Two‑up with Flexbox.</p></article>
					<article class='card'><h3>B</h3><p>Basis computed from container.</p></article>
					<article class='card'><h3>C</h3><p>Third wraps neatly.</p></article>
				</div>

				<h3 style='margin:1rem 0 0'>3 columns</h3>
				<div class='flexgrid' data-cols='3' style='--gutter:1rem; --min:14rem'>
					<article class='card'><h3>1</h3><p>Three‑up.</p></article>
					<article class='card'><h3>2</h3><p>Respects gap math.</p></article>
					<article class='card'><h3>3</h3><p>Auto wraps.</p></article>
					<article class='card'><h3>4</h3><p>New row starts clean.</p></article>
				</div>

				<h2 class='section-title'>9) Flexbox Sidebar</h2>
				<div class='flex-sidebar'>
					<article class='card flex-sidebar__main'>
						<h3>Main</h3><p>Fluid main area that prefers ~42rem but will shrink.</p>
					</article>
					<aside class='card flex-sidebar__aside'>
						<h3>Aside</h3><p>Sidebar prefers ~20–28rem.</p>
					</aside>
				</div>
			</div>

			<script>
				// Tiny controller for the playground grid
				const root = document.documentElement;
				const grid = document.getElementById('playground');

				const placement = document.getElementById('placement');
				const gutter = document.getElementById('gutter');
				const minsize = document.getElementById('minsize');

				const gutterOut = document.getElementById('gutterOut');
				const minOut = document.getElementById('minOut');

				placement.addEventListener('change', (e) => {
					grid.style.setProperty('--grid-placement', e.target.value);
				});
				gutter.addEventListener('input', (e) => {
					const px = `${e.target.value}px`;
					grid.style.setProperty('--gutter', px);
					gutterOut.textContent = e.target.value;
				});
				minsize.addEventListener('input', (e) => {
					const px = `${e.target.value}px`;
					grid.style.setProperty('--grid-min-item-size', px);
					minOut.textContent = e.target.value;
				});
			</script>
		</div>
	</body>
</html>
