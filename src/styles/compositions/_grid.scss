/* AUTO GRID
Related Every Layout: https://every-layout.dev/layouts/grid/
More info on the flexible nature: https://piccalil.li/tutorial/create-a-responsive-grid-layout-with-no-media-queries-using-css-grid/
A flexible layout that will create an auto-fill grid with
configurable grid item sizes

CUSTOM PROPERTIES AND CONFIGURATION
--gutter (var(--space-m)): This defines the space
between each item.

--grid-min-item-size (14rem): How large each item should be
ideally, as a minimum.

--grid-placement (auto-fill): Set either auto-fit or auto-fill
to change how empty grid tracks are handled */

.grid {
  display: grid;
  grid-template-columns: repeat(var(--grid-placement, auto-fill), minmax(var(--grid-min-item-size, 16rem), 1fr));
  gap: var(--gutter, var(--space-l));
}

/* A split 50/50 layout */
.grid[data-layout="50-50"] {
  --grid-placement: auto-fit;
  --grid-min-item-size: clamp(16rem, 50vw, 33rem);
}

/* Three column grid layout */
.grid[data-layout="thirds"] {
  --grid-placement: auto-fit;
  --grid-min-item-size: clamp(16rem, 33%, 20rem);
}

// FLEXBOX GRID

// Grid Container
.grid-flex {
  display: flex;
  flex-wrap: wrap;
  gap: var(--grid-gap, 1rem);
}

// Grid Item (flex columns)
.grid-flex__item {
  flex: 1 1 100%; // full-width by default
  min-width: 0; // prevents overflow from long content
}

// Modifiers for breakpoints
@media (min-width: 40em) {
  .grid-flex--2 .grid-flex__item {
    flex: 1 1 calc(50% - var(--grid-gap));
  }
  .grid-flex--3 .grid-flex__item {
    flex: 1 1 calc(33.333% - var(--grid-gap));
  }
  .grid-flex--4 .grid-flex__item {
    flex: 1 1 calc(25% - var(--grid-gap));
  }
}

@media (min-width: 64em) {
  .grid-flex-5 .grid-flex__item {
    flex: 1 1 calc(20% - var(--grid-gap));
  }
  .grid-flex--6 .grid-flex__item {
    flex: 1 1 calc(16.666% - var(--grid-gap));
  }
}
