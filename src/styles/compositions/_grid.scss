/* --- Grid System Configuration -------------------------------------- */
@use "sass:math";

$grid-max-cols: 12;
$grid-min-size-start: 16rem; // 2-col min
$grid-min-size-end: 6rem; // max-cols min

/* Derived once (Sass math, not runtime calc) */
$__size-range: $grid-min-size-start - $grid-min-size-end;
$__col-range: $grid-max-cols - 2;
$__size-step: math.div($__size-range, $__col-range);

/* --- Utilities ------------------------------------------------------- */
.gap-0 {
  --gutter: 0;
}
.gap-2 {
  --gutter: 0.5rem;
}
.gap-4 {
  --gutter: 1rem;
}
.gap-6 {
  --gutter: 1.5rem;
}

.grid--fill {
  --grid-placement: auto-fill;
}
.grid--fit {
  --grid-placement: auto-fit;
}

@for $s from 1 through $grid-max-cols {
  [data-span="#{$s}"] {
    grid-column: span #{$s};
  }
  [data-row-span="#{$s}"] {
    grid-row: span #{$s};
  }
}

/* --- Mixins ---------------------------------------------------------- */
@mixin base-grid-rules {
  display: grid;
  grid-template-columns: repeat(var(--grid-placement, auto-fit), minmax(var(--grid-min-item-size, 16rem), 1fr));
  gap: var(--gutter, 1rem);
  grid-auto-rows: minmax(min-content, auto);

  &[data-cols],
  &[data-layout] {
    --grid-placement: auto-fit;
  }
}

@mixin emit-cols-presets($selector, $child: null) {
  #{$selector}[data-cols="1"]#{$child} {
    @if $child == null {
      --grid-min-item-size: 100%;
    } @else {
      flex-basis: 100%;
      min-width: 100%;
    }
  }

  @for $i from 2 through $grid-max-cols {
    $min-size: $grid-min-size-start - (($i - 2) * $__size-step);

    #{$selector}[data-cols="#{$i}"]#{$child} {
      @if $child == null {
        --grid-min-item-size: max(#{$min-size}, calc((100% - (var(--gutter, 1rem) * #{$i - 1})) / #{$i}));
      } @else {
        flex-basis: calc((100% - (var(--gutter, 1rem) * #{$i - 1})) / #{$i});
        min-width: $min-size;
      }
    }
  }
}

/* --- Auto Grid (Every Layout style) --------------------------------- */
:where(.grid) {
  @include base-grid-rules();
}

.grid {
  @include emit-cols-presets("&");

  &--dense {
    grid-auto-flow: dense;
  }
}

.grid-container {
  container-type: inline-size;

  @container (max-width: 50rem) {
    .grid {
      --grid-min-item-size: 14rem;
    }
  }

  @container (max-width: 30rem) {
    .grid [data-span] {
      grid-column: span 1 !important;
    }
  }
}

/* --- Sidebar Grid ---------------------------------------------------- */
.sidebar-grid {
  display: grid;
  gap: var(--gutter, 1rem);
  grid-template-columns: minmax(16rem, 3fr) minmax(12rem, 1fr);
}

.sidebar-grid__container {
  container-type: inline-size;

  @container (max-width: 48rem) {
    .sidebar-grid {
      grid-template-columns: 1fr;
    }
  }
}

/* --- Flexbox Grid ---------------------------------------------------- */
.flex-grid {
  display: flex;
  flex-wrap: wrap;
  align-items: stretch;
  gap: var(--gutter, 1rem);

  > * {
    flex-grow: 1;
    min-inline-size: 0;
  }

  @include emit-cols-presets("&", " > *");

  &.flex-grid--playground > * {
    min-width: var(--min-width, 16rem);
    flex-basis: var(--flex-basis, 30%);
  }
}

/* --- Masonry Grid ---------------------------------------------------- */
.masonry-grid {
  column-count: var(--masonry-cols, 3);
  column-gap: var(--gutter, 1rem);

  > * {
    break-inside: avoid;
    margin-bottom: var(--gutter, 1rem);
  }
}

.masonry__container {
  container-type: inline-size;

  @container (max-width: 40rem) {
    .masonry-grid {
      --masonry-cols: 1;
    }
  }
  @container (40rem <= width <= 70rem) {
    .masonry-grid {
      --masonry-cols: 2;
    }
  }
  @container (min-width: 70rem) {
    .masonry-grid {
      --masonry-cols: 3;
    }
  }
}
