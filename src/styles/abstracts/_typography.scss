// imports the generated $font-sizes map
@use "sass:map";
@use "sass:string";
@use "font-sizes" as fs;

@import url("https://fonts.googleapis.com/css2?family=Fira+Sans:wght@300&family=PT+Serif:wght@400;700&display=swap");

$ff-pt-serif: "PT Serif", serif;
$ff-fira-sans: "Fira Sans", sans-serif;

$font-pt-serif-regular: 400;
$font-pt-serif-bold: 700;
$font-fira-sans-light: 300;

$fs-prop-prefix: "fs" !default; // -> --fs-step-1
$fs-root-selector: ":root" !default;

@function fs-var-name($key) {
    @return string.unquote("--#{$fs-prop-prefix}-#{$key}");
}

#{$fs-root-selector} {
    @each $key, $value in fs.$font-sizes {
        #{fs-var-name($key)}: #{$value};
    }
}

$font-size-vars: () !default;
@each $key, $value in fs.$font-sizes {
    $font-size-vars: map.set($font-size-vars, $key, var(#{fs-var-name($key)}));
}
@function font-size($key) {
    @return map.get($font-size-vars, $key);
}

@mixin fs-emit-classes($class-prefix: "fs") {
    @each $key, $value in fs.$font-sizes {
        .#{$class-prefix}-#{$key} {
            font-size: var(#{fs-var-name($key)});
        }
    }
}

@mixin fs-emit-responsive-classes($class-prefix: "fs", $breakpoints: ()) {
    @each $bp, $min in $breakpoints {
        @media (min-width: #{$min}) {
            @each $key, $value in fs.$font-sizes {
                .#{$bp}\:#{$class-prefix}-#{$key} {
                    font-size: var(#{fs-var-name($key)});
                }
            }
        }
    }
}
